{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/interceptor/cache-interceptor.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","translate","setDefaultLang","language","use","switchLanguage","selector","templateUrl","styleUrls","HttpLoaderFactory","http","AppModule","provide","useClass","multi","loader","useFactory","deps","declarations","providers","bootstrap","CacheInterceptor","next","modifiedReq","clone","headers","set","handle","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  constructor(private translate: TranslateService) {\n    this.translate.setDefaultLang('en-US');\n  }\n  switchLanguage(language: string) {\n    this.translate.use(language);\n  }\n}\n","<div>\n  <h1>{{ \"HELLO\" | translate }}</h1>\n  <button (click)=\"switchLanguage('en-US')\">English</button>\n  <button (click)=\"switchLanguage('zh-CN')\">簡體中文</button>\n</div>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {\n  HTTP_INTERCEPTORS,\n  HttpClient,\n  HttpClientModule,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { CacheInterceptor } from './shared/interceptor/cache-interceptor';\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  // Update the path to your translation files here\n  return new TranslateHttpLoader(\n    http,\n    'https://tong77777.github.io/angular-clear-cache-project/assets/i18n/',\n    '.json'\n  );\n}\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient],\n      },\n    }),\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CacheInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const modifiedReq = req.clone({\n      headers: req.headers.set('Cache-Control', 'no-cache'),\n    });\n\n    return next.handle(modifiedReq);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}